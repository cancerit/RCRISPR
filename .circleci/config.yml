version: 2.1

jobs:
  build_dev_docker:
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          name: Building CI image
          command: |
            set -e
            LC_REPO=$(echo $CIRCLE_PROJECT_REPONAME | tr '[:upper:]' '[:lower:]')
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USER" --password-stdin
            echo "docker build -f Dockerfile-ci -t $LC_REPO:$CIRCLE_SHA1 ."
            echo "HACK START"
            docker pull keiranmraine/testing:rcrispr_dev
            docker tag keiranmraine/testing:rcrispr_dev $LC_REPO:$CIRCLE_SHA1
            echo "HACK END"
            mkdir -p workspace
            docker save -o workspace/dev-image.tar ${LC_REPO}:$CIRCLE_SHA1
      - persist_to_workspace:
          root: workspace
          paths:
            - dev-image.tar
  unittests:
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Devtools unittests
          command: |
            LC_REPO=$(echo $CIRCLE_PROJECT_REPONAME | tr '[:upper:]' '[:lower:]')
            docker load -i /tmp/workspace/dev-image.tar
            docker run -ti --rm ${LC_REPO}:${CIRCLE_SHA1} r -e 'if (any(as.data.frame(devtools::test())[["failed"]] > 0)) stop("Some tests failed.")'
  check_errors:
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Devtools error check
          command: |
            LC_REPO=$(echo $CIRCLE_PROJECT_REPONAME | tr '[:upper:]' '[:lower:]')
            docker load -i /tmp/workspace/dev-image.tar
            docker run -ti --rm ${LC_REPO}:${CIRCLE_SHA1} r -e 'if (!identical(devtools::check(document = FALSE, args = "--no-tests")[["errors"]], character(0))) stop("Check with Errors")'
  install:
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Devtools install
          command: |
            LC_REPO=$(echo $CIRCLE_PROJECT_REPONAME | tr '[:upper:]' '[:lower:]')
            docker load -i /tmp/workspace/dev-image.tar
            docker run -ti --rm ${LC_REPO}:${CIRCLE_SHA1} r -e 'devtools::install()'

  build_binary:
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Building R binary
          command: |
            mkdir -p workspace
            LC_REPO=$(echo $CIRCLE_PROJECT_REPONAME | tr '[:upper:]' '[:lower:]')
            docker load -i /tmp/workspace/dev-image.tar
            container_id=$(docker run -d --rm $IMAGE_NAME:$CLEAN_BRANCH sleep 1000)
            docker exec $container_id r -e "devtools::build(binary = TRUE, path = './rcrispr_R_x86_64-pc-linux-gnu.tar.gz')" ; res=$?
            docker cp $container_id:/build/rcrispr_R_x86_64-pc-linux-gnu.tar.gz workspace/.
            docker rm -f $container_id
            exit $res
      - persist_to_workspace:
          root: workspace
          # we can't include the version due to lack of wildcard support
          paths:
            - rcrispr_R_x86_64-pc-linux-gnu.tar.gz
            # to publish automatically: https://circleci.com/blog/publishing-to-github-releases-via-circleci/


workflows:
  version: 2.1
  build_test_publish:
    jobs:
      - build_dev_docker:
          context:
            - dockerhub-casmservice
          filters:
            tags:
              only: /.+/
      - unittests:
          requires:
            - build_dev_docker
          filters:
            tags:
              only: /.+/
      - check_errors:
          requires:
            - build_dev_docker
            - unittests
          filters:
            tags:
              only: /.+/
      - install:
          requires:
            - build_dev_docker
            - unittests
          filters:
            tags:
              only: /.+/
      - build_binary:
          requires:
            - build_dev_docker
            - check_errors
            - unittests
            - install
          filters:
            tags:
              only: /.+/
