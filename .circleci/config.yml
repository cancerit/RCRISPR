version: 2.1

jobs:
  license_chk:
    machine:
      # need machine as want to mount a volume
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          name: Execute skywalking-eyes check of licenses
          # once 0.2.0 released change image
          command: |
            set -e
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USER" --password-stdin
            docker run --rm -v $(pwd):/github/workspace ghcr.io/apache/skywalking-eyes/license-eye@sha256:17a4e86591c9908c8e76531943d5522881a82a33580ad7bdf36938517ef25aa9 header check
  build_docker:
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          name: Building CI image
          command: |
            set -e
            LC_REPO=$(echo $CIRCLE_PROJECT_REPONAME | tr '[:upper:]' '[:lower:]')
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USER" --password-stdin
            echo "docker build -f Dockerfile -t $LC_REPO:$CIRCLE_SHA1 ."
            echo "HACK START"
            docker pull keiranmraine/testing:rcrispr_dev
            docker tag keiranmraine/testing:rcrispr_dev $LC_REPO:$CIRCLE_SHA1
            echo "HACK END"
            mkdir -p workspace
            docker save -o workspace/dev-image.tar ${LC_REPO}:$CIRCLE_SHA1
      - persist_to_workspace:
          root: workspace
          paths:
            - dev-image.tar
  unittests:
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Devtools unittests
          command: |
            set -e
            LC_REPO=$(echo $CIRCLE_PROJECT_REPONAME | tr '[:upper:]' '[:lower:]')
            docker load -i /tmp/workspace/dev-image.tar
            docker run -u root -w /build -ti --rm ${LC_REPO}:${CIRCLE_SHA1} r -e 'if (any(as.data.frame(devtools::test())[["failed"]] > 0)) stop("Some tests failed.")'
  devtools_checks:
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Devtools checks
          command: |
            set -e
            LC_REPO=$(echo $CIRCLE_PROJECT_REPONAME | tr '[:upper:]' '[:lower:]')
            docker load -i /tmp/workspace/dev-image.tar
            container_id=$(docker run -u root -w /build -d --rm ${LC_REPO}:${CIRCLE_SHA1} sleep 10000)
            set +e
            set -x
            docker exec ${container_id} r -e 'if (!identical(devtools::check(document = FALSE, quiet = TRUE, args = "--no-tests")[["notes"]], character(0))) stop("Check with Notes")' || \
              docker exec ${container_id} cat /tmp/rcrispr.Rcheck/00check.log
            docker exec ${container_id} r -e 'if (!identical(devtools::check(document = FALSE, quiet = TRUE, args = "--no-tests")[["warnings"]], character(0))) stop("Check with Warnings")' || \
              docker exec ${container_id} cat /tmp/rcrispr.Rcheck/00check.log
            docker exec ${container_id} r -e 'if (!identical(devtools::check(document = FALSE, quiet = TRUE, args = "--no-tests")[["errors"]], character(0))) stop("Check with Errors")' ; res=$?
            if [ "$res" -ne "0" ]; then
              docker exec ${container_id} cat /tmp/rcrispr.Rcheck/00check.log
            fi
            docker rm -f $container_id
            if [ "$res" -ne "0" ]; then
              exit $res
            fi

  deploy:
    machine:
      image: ubuntu-2004:202107-02
    environment:
      IMAGE_NAME: quay.io/wtsicgp/rcrispr
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Build R binary, push docker-image
          command: |
            set -e
            mkdir -p /tmp/build
            LC_REPO=$(echo $CIRCLE_PROJECT_REPONAME | tr '[:upper:]' '[:lower:]')
            docker load -i /tmp/workspace/dev-image.tar
            container_id=$(docker run -u root -w /build -d --rm ${LC_REPO}:${CIRCLE_SHA1} sleep 1000)
            set +e
            docker exec $container_id r -e "devtools::build(binary = TRUE, path = './')" ; res=$?
            docker exec $container_id bash -c 'mkdir -p dist && mv rcrispr*.tar.gz dist/.'
            docker cp $container_id:/build/dist /tmp/build
            docker rm -f $container_id
            if [ "$res" -ne "0" ]; then
              exit $res
            fi
            set -e
            BRANCH_OR_TAG="${CIRCLE_TAG:-$CIRCLE_BRANCH}"
            CLEAN_BRANCH=$(echo $BRANCH_OR_TAG | tr / -)
            if [ "$CIRCLE_TAG" = "$BRANCH_OR_TAG" ]; then
              docker tag ${LC_REPO}:${CIRCLE_SHA1} $IMAGE_NAME:$CLEAN_BRANCH
              echo "$QUAYIO_PASSWORD" | docker login -u "$QUAYIO_USER" --password-stdin quay.io
              echo 'Pushing image'
              docker push $IMAGE_NAME:$CLEAN_BRANCH
            else
              echo "I am not a tag so not pushing image"
            fi
      # to publish R tar to github automatically: https://circleci.com/blog/publishing-to-github-releases-via-circleci/
      - store_artifacts:
          path: /tmp/build
          #path: /tmp/build/rcrispr_R_x86_64-pc-linux-gnu.tar.gz
          #destination: rcrispr_R_x86_64-pc-linux-gnu.tar.gz



workflows:
  version: 2.1
  build_test_publish:
    jobs:
      - license_chk:
          context:
            - dockerhub-casmservice
      - build_docker:
          context:
            - dockerhub-casmservice
          filters:
            tags:
              only: /.+/
      - unittests:
          requires:
            - build_docker
          filters:
            tags:
              only: /.+/
      - devtools_checks:
          requires:
            - build_docker
          filters:
            tags:
              only: /.+/
      - deploy:
          requires:
            - license_chk
            - build_docker
            - unittests
            - devtools_checks
          context:
            - quayio-casmservice
          filters:
            tags:
              only: /.+/
